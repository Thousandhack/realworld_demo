syntax = "proto3";

package realworld.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "realworld_demo/api/realworld/v1;v1";



service RealWorld {
  rpc Login (LoginRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/api/users/login",
      body: "*"
    };
  }

  rpc Register (RegisterRequest) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/api/users",
      body: "*"
    };
  }

  rpc GetCurrentUser (GetCurrentRequest) returns (UserReply) {
    option (google.api.http) = {
      get: "/api/user",
    };
  }

  rpc UpdateUser (UpdateUserRequest) returns (UserReply) {
    option (google.api.http) = {
      put: "/api/user",
      body: "*"
    };
  }

  rpc GetProfile (GetProfileRequest) returns (GetProfileReply) {
    option (google.api.http) = {
      get: "/api/profile/{username}",
    };
  }

  rpc FollowUser (FollowUserRequest) returns (ProfileReply) {
    option (google.api.http) = {
      post: "/api/profile/{username}/follow",
      body: "*"
    };
  }

  rpc UnFollowUser (UnFollowUserRequest) returns (ProfileReply) {
    option (google.api.http) = {
      delete: "/api/profile/{username}/follow",
    };
  }

  rpc ListArticles (ListArticlesRequest) returns (MultipleArticlesReply) {
    option (google.api.http) = {
      get: "/api/articles",
    };
  }

  rpc FeedListArticles (FeedArticlesRequest) returns (MultipleArticlesReply) {
    option (google.api.http) = {
      get: "/api/articles/feed",
    };
  }

  rpc GetArticle (GetArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      get: "/api/article/{slug}",
    };
  }

  rpc CreateArticle (CreateArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      post: "/api/article",
      body: "*"
    };
  }

  rpc UpdateArticle (UpdateArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      put: "/api/article/{slug}",
      body: "*"
    };
  }

  rpc DeleteArticle (DeleteArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      delete: "/api/article/{slug}",
    };
  }

  rpc AddComment (AddCommentRequest) returns (SingleCommentReply) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/comments",
      body: "*"
    };
  }


  rpc GetComment (GetCommentRequest) returns (SingleCommentReply) {
    option (google.api.http) = {
      get: "/api/articles/{slug}/comments",
    };
  }

  rpc DeleteComment (DeleteCommentRequest) returns (SingleCommentReply) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/comments/{id}",
    };
  }

  rpc FavoriteArticle (FavoriteArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      post: "/api/articles/{slug}/favorite",
      body: "*"
    };
  }

  rpc UnFavoriteArticle (UnFavoriteArticleRequest) returns (SingleArticleReply) {
    option (google.api.http) = {
      delete: "/api/articles/{slug}/favorite",
    };
  }

  rpc GetTags (GetTagsRequest) returns (TagListReply) {
    option (google.api.http) = {
      get: "/api/tags",
    };
  }

}





message LoginRequest {
  message User{
    string email = 1;
    string password = 2;
  }
  User user = 1;
}


message LoginReply {
  message User{
    string email = 1;
    string token = 2;
    string username = 3;
    string bio = 4;
    string image = 5;
  }
  User user = 1;
}

message RegisterRequest {
  message User{
    string username = 1;
    string email = 2;
    string password = 3;
  }
  User user = 1;
}

// The response message containing the greetings



message RegisterReply {
  message User{
    string username = 1;
    string email = 2;
  }
  User user = 1;
}



message GetCurrentRequest {

}


message UserReply {
  message User {
    string email = 1;
    string token = 2;
    string username = 3;
    string bio = 4;
    string image = 5;
  }
  User user = 1;
}


message UpdateUserRequest {

}

message GetProfileRequest {
  string username = 1;

}

message GetProfileReply {


}

message FollowUserRequest {
  string username = 1;
}

message UnFollowUserRequest {
  string username = 1;
}

message FollowUserReply {

}

message ProfileReply {
  message Profile {
    string username = 1;
    string bio = 2;
    string image = 3;
    bool following = 4;
  }
  Profile profile = 1;
}

message ListArticlesRequest {
  string tag = 1;
  string author = 2;
  string favorited = 3;
  int64 limit = 4;
  int64 offset = 5;
}



message MultipleArticlesReply {
  repeated Article articles = 1;
  uint32 articles_count = 2;
}


message FeedArticlesRequest {
  int64 limit = 4;
  int64 offset = 5;
}


message GetArticleRequest {
  string slug = 1;
}



message SingleArticleReply {
  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tagList = 4;
  }
  Article article = 1;
}

message  CreateArticleRequest{
  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tag_list = 4;
  }
  Article article = 1;
  string slug = 2; // Optional, used for update
}

message UpdateArticleRequest {
  message Article {
    string title = 1;
    string description = 2;
    string body = 3;
    repeated string tagList = 4;
  }
  Article article = 1;
  string slug = 2;
}

message DeleteArticleRequest {
  string slug = 1;
}


message AddCommentRequest {
  string slug = 1;
  message Comment {
    string body = 1;
  }
  Comment comment = 2;
}

message Profile {
  string username = 1;
  string bio = 2;
  string image = 3;
  bool following = 4;
}


message Comment {
  uint32 id = 1;
  google.protobuf.Timestamp createdAt = 2;
  google.protobuf.Timestamp updatedAt = 3;
  string body = 4;
  Profile author = 5;
}

message SingleCommentReply {
  Comment comment = 1;
}

message MultipleCommentsReply {
  repeated Comment comments = 1;
}

message DeleteCommentRequest {
  string slug = 1;
  int64 id = 2;
}

message GetCommentRequest{
  string slug = 1;
}

message FavoriteArticleRequest{
  string slug = 1;
}

message UnFavoriteArticleRequest{
  string slug = 1;
}


message GetTagsRequest {

}


message TagListReply {
  repeated string tags = 1;
}

message Author {
  string username = 1;
  string bio = 2;
  string image = 3;
  bool following = 4;
}

message Article {
  string slug = 1;
  string title = 2;
  string description = 3;
  string body = 4;
  repeated string tag_list = 5;
  string created_at = 6;
  string updated_at = 7;
  bool favorited = 8;
  uint32 favorites_count = 9;
  Author author = 10;
}
